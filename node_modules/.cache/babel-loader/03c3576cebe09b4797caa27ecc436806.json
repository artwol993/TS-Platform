{"ast":null,"code":"var _jsxFileName = \"/home/lenovo/Desktop/TS-Platform/src/components/operations.js\";\nimport React, { useState, useEffect } from 'react';\nimport Offer from '../components/pages/Offer';\nimport ShowOffer from '../components/pages/ShowOffer';\nexport const addOffer = newOffer => {\n  let body = JSON.stringify(newOffer);\n  return fetch(`http://localhost:3000/offers/`, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"POST\",\n    body: body\n  }).then(r => r.json());\n};\nexport const updateOffers = (id, newOffer, successCallback) => {\n  fetch(`http://localhost:3000/offers/${id}`, {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    method: \"PUT\",\n    body: JSON.stringify(newOffer)\n  }).then(r => r.json()).then(data => {\n    if (data.error === false && typeof successCallback === \"function\") {\n      successCallback(data.data);\n    }\n  }).catch(err => console.log(err));\n};\nexport const getOffers = (condition = '') => {\n  return fetch(`http://localhost:3000/offers?${condition}`).then(resp => resp.json());\n};\n\nfunction Offers() {\n  const [offers, setOffer] = useState([]);\n  useEffect(() => {\n    fetchAllOffers();\n  }, []);\n\n  const fetchAllOffers = () => {\n    availableOffers().then(availableOffers => setOffer(availableOffers));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"offers_container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, offers.map(offer => /*#__PURE__*/React.createElement(Offer, Object.assign({\n    key: offer.id\n  }, offer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }))));\n}\n\nasync function availableOffers() {\n  let offers = await getOffers();\n}\n\nexport { Offers };","map":{"version":3,"sources":["/home/lenovo/Desktop/TS-Platform/src/components/operations.js"],"names":["React","useState","useEffect","Offer","ShowOffer","addOffer","newOffer","body","JSON","stringify","fetch","headers","method","then","r","json","updateOffers","id","successCallback","data","error","catch","err","console","log","getOffers","condition","resp","Offers","offers","setOffer","fetchAllOffers","availableOffers","map","offer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AAEA,OAAO,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AAClC,MAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,QAAf,CAAX;AACA,SAAOI,KAAK,CAAE,+BAAF,EAAkC;AAC1CC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KADiC;AAI1CC,IAAAA,MAAM,EAAE,MAJkC;AAK1CL,IAAAA,IAAI,EAAEA;AALoC,GAAlC,CAAL,CAOFM,IAPE,CAOIC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAPV,CAAP;AAQH,CAVM;AAYP,OAAO,MAAMC,YAAY,GAAG,CAACC,EAAD,EAAKX,QAAL,EAAeY,eAAf,KAAmC;AAC3DR,EAAAA,KAAK,CAAE,gCAA+BO,EAAG,EAApC,EAAuC;AACxCN,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX,KAD+B;AAIxCC,IAAAA,MAAM,EAAE,KAJgC;AAKxCL,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,QAAf;AALkC,GAAvC,CAAL,CAOKO,IAPL,CAOWC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAPjB,EAQKF,IARL,CAQWM,IAAD,IAAU;AACZ,QAAIA,IAAI,CAACC,KAAL,KAAe,KAAf,IAAwB,OAAOF,eAAP,KAA2B,UAAvD,EAAmE;AAC/DA,MAAAA,eAAe,CAACC,IAAI,CAACA,IAAN,CAAf;AACH;AACJ,GAZL,EAaKE,KAbL,CAaYC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAbpB;AAcH,CAfM;AAiBP,OAAO,MAAMG,SAAS,GAAG,CAACC,SAAS,GAAG,EAAb,KAAoB;AACzC,SAAOhB,KAAK,CAAE,gCAA+BgB,SAAU,EAA3C,CAAL,CACFb,IADE,CACIc,IAAD,IAAUA,IAAI,CAACZ,IAAL,EADb,CAAP;AAEH,CAHM;;AAMP,SAASa,MAAT,GAAkB;AACd,QAAM,CAACC,MAAD,EAASC,QAAT,IAAqB7B,QAAQ,CAAC,EAAD,CAAnC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ6B,IAAAA,cAAc;AACjB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,cAAc,GAAG,MAAM;AACzBC,IAAAA,eAAe,GACVnB,IADL,CACWmB,eAAD,IAAqBF,QAAQ,CAACE,eAAD,CADvC;AAEH,GAHD;;AAKA,sBACI;AAAK,IAAA,SAAS,EAAE,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,MAAM,CAACI,GAAP,CAAYC,KAAD,iBACR,oBAAC,KAAD;AAAO,IAAA,GAAG,EAAEA,KAAK,CAACjB;AAAlB,KAA0BiB,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADH,CADL,CADJ;AAOH;;AAED,eAAeF,eAAf,GAAiC;AAC7B,MAAIH,MAAM,GAAG,MAAMJ,SAAS,EAA5B;AACH;;AAED,SAASG,MAAT","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Offer from '../components/pages/Offer'\nimport ShowOffer from '../components/pages/ShowOffer'\n\nexport const addOffer = (newOffer) => {\n    let body = JSON.stringify(newOffer);\n    return fetch(`http://localhost:3000/offers/`, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        method: \"POST\",\n        body: body,\n    })\n        .then((r) => r.json())\n};\n\nexport const updateOffers = (id, newOffer, successCallback) => {\n    fetch(`http://localhost:3000/offers/${id}`, {\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        method: \"PUT\",\n        body: JSON.stringify(newOffer),\n    })\n        .then((r) => r.json())\n        .then((data) => {\n            if (data.error === false && typeof successCallback === \"function\") {\n                successCallback(data.data);\n            }\n        })\n        .catch((err) => console.log(err));\n};\n\nexport const getOffers = (condition = '') => {\n    return fetch(`http://localhost:3000/offers?${condition}`)\n        .then((resp) => resp.json())\n}\n\n\nfunction Offers() {\n    const [offers, setOffer] = useState([]);\n\n    useEffect(() => {\n        fetchAllOffers();\n    }, []);\n\n    const fetchAllOffers = () => {\n        availableOffers()\n            .then((availableOffers) => setOffer(availableOffers));\n    };\n\n    return (\n        <div className={\"offers_container\"}>\n            {offers.map((offer) => (\n                <Offer key={offer.id} {...offer} />\n            ))}\n        </div>\n    );\n}\n\nasync function availableOffers() {\n    let offers = await getOffers()\n}\n\nexport { Offers };"]},"metadata":{},"sourceType":"module"}